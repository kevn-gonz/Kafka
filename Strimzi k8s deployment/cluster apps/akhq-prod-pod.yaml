# imagePullSecrets:
#  - name: my-repository-secret
image:
  repository: tchiotludo/akhq
#  tag: latest
  tag: 0.17.0

# custom annotations (example: for prometheus)
annotations: {}
  #prometheus.io/scrape: 'true'
  #prometheus.io/port: '8080'
  #prometheus.io/path: '/prometheus'

## You can put directly your configuration here... or add java opts or any other env vars
extraEnv: []
# - name: AKHQ_CONFIGURATION
#   value: |
#       akhq:
#         secrets:
#           docker-kafka-server:
#             properties:
#               bootstrap.servers: "kafka:9092"
# - name: JAVA_OPTS
#   value: "-Djavax.net.ssl.trustStore=/usr/local/openjdk-11/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password"
# - name: CLASSPATH
#   value: "/any/additional/jars/desired.jar:/go/here.jar"

## Or you can also use configmap for the configuration...
configuration: |
  micronaut:
    security:
      enabled: true
      token:
        jwt:
          signatures:
            secret:
              generator:
                secret: "MFjSyRo0uPCt7PAWcVDPusAgmQ6J3nSaiUFRdp96aS8NI8SJK76hyoq9HOyB1lJe" # just a random secert here
      ldap:
        default:
          enabled: true
          context:
            server: "ldap://<LDAP_SERVER>:389"
            managerDn: "CN=...."
            managerPassword: '<PASSWORD>'
          search:
            enabled: true
            base: "OU=Users,DC=...."
            filter: "sAMAccountName={0}"
          groups:
            enabled: true
            subtree: true  # Pay attention here, this is needed.
            base: "OU=Applications,DC=...."
            filter: "member={0}"
  akhq:
    server:
      access-log:
        enabled: false
        name: org.akhq.log.access
    security:
        default-group: no-roles
        # Groups definition
        groups:
          admin: # Group name
            roles:  # roles for the group
              - topic/read
              - topic/insert
              - topic/delete
              - topic/config/update
              - node/read
              - node/config/update
              - topic/data/read
              - topic/data/insert
              - topic/data/delete
              - group/read
              - group/delete
              - group/offsets/update
              - registry/read
              - registry/insert
              - registry/update
              - registry/delete
              - registry/version/delete
              - acls/read
              - connect/read
              - connect/insert
              - connect/update
              - connect/delete
              - connect/state/update
        ldap:
          groups:
            - name: "<LDAP_GROUP_NAME>"
              groups:
                - admin

existingSecrets: ""
# name of the existingSecret
secrets: | 
  akhq:
    connections:
      kafka-prod-cluster:
        properties:
          #bootstrap.servers: "SSL://kafka-prod-cluster-kafka-external-bootstrap:9094"
          bootstrap.servers: "SASL_PLAINTEXT://kafka-prod-cluster-kafka-external-bootstrap:9092"
          security.protocol: SASL_PLAINTEXT
          sasl.mechanism: SCRAM-SHA-512
          sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="<AKHQ_USER>" password="<AKHQ_USER_PASSWORD>";
          #ssl.enabled.protocols: TLSv1.2
          #ssl.endpoint.identification.algorithm: ""
          #ssl.truststore.type: PKCS12
          #ssl.truststore.location: /mnt/truststore/ca.p12
          #ssl.truststore.password: F71Wu1jZjUoB
        # schema-registry:
          # url: "https://test-cp-schema-registry...."
          # type: "confluent"
          # basic-auth-username: foo
          # basic-auth-password: bar

kafkaSecrets: []
#Provide extra base64 encoded kubernetes secrets (keystore/truststore)

# Specify ServiceAccount for pod
serviceAccountName: null

# Add your own init container or uncomment and modify the example.
initContainers: {}
#   create-keystore:
#     image: "openjdk:11-slim"
#     command: ['sh', '-c', 'keytool']
#     volumeMounts:
#      - mountPath: /tmp
#        name: certs

securityContext: {}
#  capabilities:
#    drop:
#      - ALL
#  # readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

service:
  enabled: true
  type: ClusterIP
  port: 80
  #httpNodePort: 32551
  labels: {}
  annotations:
    # cloud.google.com/load-balancer-type: "Internal"

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  paths:
    - /
  hosts:
    - kafka-prod-cluster-akhq......
  tls: 
    - hosts:
        - kafka-prod-cluster-akhq......

readinessProbe:
  prefix: "" # set same as `micronaut.server.context-path`

resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []
